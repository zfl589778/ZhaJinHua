<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd"
	 default-lazy-init="true">

	<description>Spring-MyBatis配置文件 </description>
	
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mapper/Configuration.xml" />
		<property name="mapperLocations" value="classpath:/mapper/**/*Mapper.xml" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
	  <constructor-arg index="0" ref="sqlSessionFactory" />
	  <constructor-arg index="1" value="REUSE" />
	</bean>
	
	<!-- local development环境 -->
	<context:property-placeholder system-properties-mode="OVERRIDE"  ignore-resource-not-found="true"
		location="classpath*:/application.properties" />	
		<!-- c3p0 datasource -->
		<!-- data source -->  
    <bean id="dataSource"  
          class="com.mchange.v2.c3p0.ComboPooledDataSource"  
          destroy-method="close">  
        <property name="driverClass">  
            <value>${jdbc.driver}</value>  
        </property>  
        <property name="jdbcUrl">  
            <value>${jdbc.url}</value>  
        </property>  
        <property name="user">  
            <value>${jdbc.username}</value>  
        </property>  
        <property name="password">  
            <value>${jdbc.password}</value>  
        </property>  
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
        <property name="acquireIncrement">  
            <value>${c3p0.acquireIncrement}</value>  
        </property>  
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->   
        <property name="initialPoolSize">  
            <value>${c3p0.initialPoolSize}</value>  
        </property>  
        <property name="minPoolSize">  
            <value>${c3p0.minPoolSize}</value>  
        </property>  
        <property name="maxPoolSize">  
            <value>${c3p0.maxPoolSize}</value>  
        </property>  
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->   
        <property name="maxIdleTime">  
            <value>${c3p0.maxIdleTime}</value>  
        </property>  
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->   
        <property name="idleConnectionTestPeriod">  
            <value>${c3p0.idleConnectionTestPeriod}</value>  
        </property>  
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   
                            属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
                            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->   
        <property name="maxStatements">  
            <value>${c3p0.maxStatements}</value>  
        </property>  
        <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过  
                                  多线程实现多个操作同时被执行。Default: 3-->   
        <property name="numHelperThreads">  
            <value>${c3p0.numHelperThreads}</value>  
        </property>  
    </bean> 
		
	<!-- 事务管理器 -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"  
          p:dataSource-ref="dataSource"/>   -->
          
    <!-- 启用注解方式控制事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
		
       <!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
	<!-- <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		Connection Info
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		初始化连接数,默认为10 
		<property name="initialSize" value="${jdbc.initialSize}"/>
		没有可用连接时,抛出异常前最长等待时间(单位:毫秒,默认30000/30秒)
		<property name="maxWait" value="${jdbc.maxWait}"/>
		同一时间可从连接池中分配的最大连接数
		<property name="maxActive" value="${jdbc.maxActive}" />
		连接池中应保持的最小连接数,默认和initialSize的值一样
		<property name="minIdle" value="${jdbc.minIdle}"/>
		连接池中应保持的最大连接数
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		运行"检查已经超时/废弃的连接"的线程频率(毫秒/次),默认为5000/5秒
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		连接超时的最小时间(单位:毫秒,默认为60000/60秒)
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		取连接前使用validationQuery验证,验证失败则从连接池中去除且尝试取出另一个
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
		当连接被放回到连接池中时,使用validationQuery验证连接,无效则去除
		<property name="testOnReturn" value="${jdbc.testOnReturn}"/>
		每隔timeBetweenEvictionRunsMillis时长使用validationQuery去验证非活动的连接
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
		验证的SQL
		<property name="validationQuery" value="${jdbc.validationQuery}"/>
		验证SQL超时时间
		<property name="validationQueryTimeout" value="${jdbc.validationQueryTimeout}"/>
		连接最大存活时间,0为禁用此选项
		<property name="maxAge" value="${jdbc.maxAge}"/>
		JMX 是否启用
		<property name="jmxEnabled" value="${jdbc.jmxEnabled}"/>
		不默认提交 , 双数据源时,默认提交为true,否则读不到直接手动写入DB的数据
		<property name="defaultAutoCommit" value="false" />
	</bean>  -->
	
</beans>